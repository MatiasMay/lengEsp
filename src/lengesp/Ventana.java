/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package lengesp;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.StringTokenizer;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;


/**
 *
 * @author LABORATORIOVhsa
 */


public class Ventana extends javax.swing.JFrame {



    /**
     * Creates new form Ventana
     */
    public Ventana() {
        initComponents();
        iniciarColores();
    }
    
    SimpleAttributeSet attrsAzul;
    SimpleAttributeSet attrsNormal;
    SimpleAttributeSet attrsRojo;
    SimpleAttributeSet attrsMorado;
    SimpleAttributeSet attrsSalmon;
    SimpleAttributeSet attrsVerde;
    SimpleAttributeSet attrsRed;
    SimpleAttributeSet attrsOp;
    SimpleAttributeSet attrsBlue;
    
    //Inicialización de colores para uso posterior
    private void iniciarColores() {
        attrsAzul = new SimpleAttributeSet();
        StyleConstants.setBold(attrsAzul, true);
        StyleConstants.setForeground(attrsAzul, Color.blue);
        attrsNormal = new SimpleAttributeSet();
        StyleConstants.setBold(attrsNormal, false);
        StyleConstants.setForeground(attrsNormal, Color.black);
        attrsRojo = new SimpleAttributeSet();
        StyleConstants.setBold(attrsRojo, false);
        StyleConstants.setForeground(attrsRojo, Color.red);
        attrsMorado = new SimpleAttributeSet();
        StyleConstants.setBold(attrsMorado, true);
        StyleConstants.setForeground(attrsMorado, Color.MAGENTA);
        //  StyleConstants.setUnderline(attrsMorado, true);
        attrsSalmon = new SimpleAttributeSet();
        StyleConstants.setBold(attrsSalmon, false);
        //StyleConstants.setUnderline(attrsSalmon, true);
        StyleConstants.setForeground(attrsSalmon, Color.ORANGE);
        attrsVerde = new SimpleAttributeSet();
        StyleConstants.setBold(attrsVerde, true);
        StyleConstants.setForeground(attrsVerde, Color.green);
        //StyleConstants.setUnderline(attrsGreen, true);
        attrsRed = new SimpleAttributeSet();
        StyleConstants.setForeground(attrsRed, Color.RED);
        StyleConstants.setItalic(attrsRed, true);
        StyleConstants.setBold(attrsRed, true);
        attrsOp = new SimpleAttributeSet();
        StyleConstants.setForeground(attrsOp, Color.DARK_GRAY);
        StyleConstants.setItalic(attrsOp, true);
        StyleConstants.setBold(attrsOp, true);
        attrsBlue = new SimpleAttributeSet();
        StyleConstants.setForeground(attrsBlue, Color.blue);
        StyleConstants.setItalic(attrsBlue, true);
        StyleConstants.setBold(attrsBlue, true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        btnLexico = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listTokens = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtMensajes = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtCodigo = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnuNuevo = new javax.swing.JMenuItem();
        mnuGuardar = new javax.swing.JMenuItem();
        mnuCargar = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menuBuscar = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 255, 255));
        setResizable(false);

        btnLexico.setForeground(new java.awt.Color(51, 51, 255));
        btnLexico.setText("Analisis lexico");
        btnLexico.setOpaque(true);
        btnLexico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLexicoActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(listTokens);

        txtMensajes.setEditable(false);
        txtMensajes.setColumns(20);
        txtMensajes.setRows(5);
        jScrollPane3.setViewportView(txtMensajes);

        jScrollPane2.setViewportView(txtCodigo);

        jMenuBar1.setOpaque(true);

        jMenu1.setText("File");

        mnuNuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mnuNuevo.setText("Nuevo código");
        mnuNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuNuevoActionPerformed(evt);
            }
        });
        jMenu1.add(mnuNuevo);

        mnuGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mnuGuardar.setText("Guardar");
        mnuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuGuardarActionPerformed(evt);
            }
        });
        jMenu1.add(mnuGuardar);

        mnuCargar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mnuCargar.setText("Cargar");
        mnuCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCargarActionPerformed(evt);
            }
        });
        jMenu1.add(mnuCargar);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        menuBuscar.setText("Buscar");
        jMenu2.add(menuBuscar);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE))
                    .addComponent(btnLexico))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(btnLexico)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        setBounds(0, 0, 771, 383);
    }// </editor-fold>//GEN-END:initComponents
    
    /*Boton que ejecuta la creacion de lista de tokens detectados
    Recursos utilizados para el manejo de excepción:
    https://stackoverflow.com/questions/22626436/how-to-switch-between-lines-in-jtextarea-in-swing
    https://stackoverflow.com/questions/13440506/find-all-numbers-in-the-string*/
    private void btnLexicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLexicoActionPerformed
        ArrayList<Token> lista = new ArrayList<>();
        try {
            //El contenido de la lista
            DefaultListModel<String> modelo = new DefaultListModel<>();
            listTokens.setModel(modelo);
            InputStream targetStream = new ByteArrayInputStream(txtCodigo.getText().getBytes());
            prEsp leng = new prEsp(lista, targetStream);
            leng.probar();
            //Mandar la lista al modelo para que aparezca en el List
            txtMensajes.setText("Analisis Lexico exitoso!!!");
            for(Token token : lista) {
                modelo.addElement(token.toString());
            }
        } catch (TokenMgrError e){
            txtMensajes.setText("Error lexico: " +e.getMessage());
            String str = e.getMessage();      
            str = str.replaceAll("[^0-9]+", " ");
            List<String> strs = Arrays.asList(str.trim().split(" "));
            txtCodigo.setCaretPosition(txtCodigo.getDocument().getDefaultRootElement()
                    .getElement(Integer.parseInt(strs.get(0))-1).getStartOffset() + (Integer.parseInt(strs.get(1))-1));
            txtCodigo.requestFocus();
        }
        catch (ParseException e){
            txtMensajes.setText("Error sintactico: " + e.getMessage());
        }
        if(txtCodigo != null){
            colorearTokens(lista);
        }
    }//GEN-LAST:event_btnLexicoActionPerformed

    private void mnuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuGuardarActionPerformed
        selectorArchivos("guardar");
    }//GEN-LAST:event_mnuGuardarActionPerformed

    private void mnuCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCargarActionPerformed
        selectorArchivos("cargar");
    }//GEN-LAST:event_mnuCargarActionPerformed

    private void mnuNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuNuevoActionPerformed
        txtCodigo.setText("");
        txtMensajes.setText("");
        DefaultListModel<String> modelo = new DefaultListModel<>();
        listTokens.setModel(modelo);
    }//GEN-LAST:event_mnuNuevoActionPerformed
  
/*  Funcion que manda a colorear los tokens de acuerdo a que tipo de tokens son.
    Tanto colorearTokens como posicionesEnLineaCaracter (funciones para cambiar color del texto) son código reutilizado
    de: https://www.youtube.com/watch?v=KIrPPrbcYN8&list=PLhbSLFs0SUZaD8QLN7LhpWwvHDWoS7OEg&index=3&ab_channel=BelisarioDeLaMata*/
    private void colorearTokens(List<Token> tokens){
        for (Token token : tokens) {
            //System.out.println(token.toString()+"-->"+token.kind+"-->"+AnalizadorConstants.tokenImage[token.kind]);
            switch (token.kind) {
                case prEsp.INICIO:
                case prEsp.FIN:
                    colorearTokens(token, attrsMorado);
                    break;
                case prEsp.LEER:
                case prEsp.IMPRIMIR:
                    colorearTokens(token, attrsAzul);
                    break;
                case prEsp.ENT:
                case prEsp.DEC:
                case prEsp.CAD:
                    colorearTokens(token, attrsRojo);
                    break;
                case prEsp.SUMA:
                case prEsp.RESTA:
                case prEsp.MULT:
                case prEsp.DIV:
                case prEsp.MOD:
                case prEsp.POT:
                    break;
                case prEsp.RCD:
                    colorearTokens(token, attrsAzul);
                    break;
                case prEsp.ASIG:
                    break;
                case prEsp.AENT:
                case prEsp.ADEC:
                case prEsp.ACAD:
                    colorearTokens(token, attrsAzul);
                    break;
                case prEsp.COMA:
                case prEsp.PYC:
                    break;
                case prEsp.P1:
                case prEsp.P2:
                case prEsp.C1:
                case prEsp.C2:
                case prEsp.B1:
                case prEsp.B2:
                    colorearTokens(token, attrsSalmon);
                    break;
                case prEsp.IF:
                case prEsp.ELIF:
                case prEsp.ELSE:
                case prEsp.FOR:
                case prEsp.WHILE:
                    break;
                case prEsp.VAR:
                    colorearTokens(token,attrsVerde);
                case prEsp.ENTERO:
                case prEsp.DECIMAL:
                case prEsp.LESST:
                case prEsp.MORET:
                case prEsp.EQT:
                case prEsp.LESSEQT:
                case prEsp.MOREEQT:
                case prEsp.DIF:
                case prEsp.AND:
                case prEsp.OR:
                case prEsp.NOT:
                case prEsp.CADENA:{
                    break;
                }
                default:
                    colorearTokens(token, attrsNormal);
            }
        }
        if (!tokens.isEmpty()) {
            Token token = tokens.get(tokens.size() - 1);
            int posicionFinal = posicionesEnLineaCaracter(txtCodigo.getText(), token.endLine, token.endColumn);
            if (posicionFinal >= 0) {
                StyledDocument sd = txtCodigo.getStyledDocument();
                if (sd != null) {
                    sd.setCharacterAttributes(posicionFinal, txtCodigo.getText().length() - posicionFinal + 1,
                            attrsNormal, true);
                }
            }
        }
    }
    /*Función que se encarga de colorear todo el token
    Recurso utilizado: https://www.youtube.com/watch?v=KIrPPrbcYN8&list=PLhbSLFs0SUZaD8QLN7LhpWwvHDWoS7OEg&index=3&ab_channel=BelisarioDeLaMata*/
    private void colorearTokens(Token token, SimpleAttributeSet simpleAttribute) {
        int posicionInicial = posicionesEnLineaCaracter(txtCodigo.getText(), token.beginLine, token.beginColumn);
        int posicionFinal = posicionesEnLineaCaracter(txtCodigo.getText(), token.endLine, token.endColumn);
        StyledDocument sd = txtCodigo.getStyledDocument();
        if (posicionInicial >= 0 && posicionFinal >= 0) {
            if (sd != null) {
                sd.setCharacterAttributes(posicionInicial, posicionFinal - posicionInicial + 1,
                        simpleAttribute, true);
            }
        }

    }
    /*Funcion que devuelve la posición del token
    Recurso utilizado: https://www.youtube.com/watch?v=KIrPPrbcYN8&list=PLhbSLFs0SUZaD8QLN7LhpWwvHDWoS7OEg&index=3&ab_channel=BelisarioDeLaMata*/
    private int posicionesEnLineaCaracter(String cadena, int linea, int columna) {
        int posicion = 0;
        String cadenaSplit[] = cadena.split("\\r?\\n");
        for (int i = 0; i < cadenaSplit.length; i++) {
            if (i != 0) {
                posicion++;
            }
            if (i == linea - 1) {
                posicion += columna;
                break;
            } else {
                posicion += (cadenaSplit[i].length());
            }
        }
        posicion -= 1;
        return posicion;
    }


    /*Funcion para el selector de archivos que guarda o carga codigos
  Recursos utilizados:
    https://stackoverflow.com/questions/26133085/reading-lines-from-a-file-in-java
    https://stackoverflow.com/questions/23278439/how-do-you-save-a-txt-file-with-jfilechooser
    https://stackoverflow.com/questions/4059198/jtextpane-appending-a-new-string
    */
    private void selectorArchivos(String opc){
        fileChooser.setDialogTitle("Escoja un archivo para " + opc);
        //Codigo para filtrar archivos de texto
        FileFilter filtro = new FileNameExtensionFilter("Archivos de texto(.txt)", "txt", "text");
        fileChooser.setFileFilter(filtro);
        int selector;
        //Codigo principal
        FileWriter fw = null;
        File selecArchivo = new File("my-file.txt");
        try{
            if(opc.equals("guardar")){ //Codigo que muestra el tipo de interfaz de seleccion
                selector  = fileChooser.showSaveDialog(jScrollPane2);   
            }else{
                selector  = fileChooser.showOpenDialog(jScrollPane2);
            }
            if (selector == JFileChooser.APPROVE_OPTION) {
                selecArchivo = fileChooser.getSelectedFile();
                System.out.println(opc+": " + selecArchivo.getAbsolutePath());
                }
            switch(opc){
            case "guardar": //Codigo para guardar archivo
                if (!(selecArchivo.getName().endsWith(".txt"))){ //Checa si el usuario ya escribio .txt en el nombre del archivo para no agregarlo en extension
                    selecArchivo = new File (selecArchivo.getAbsolutePath() + ".txt");
                }
                fw = new FileWriter(selecArchivo);
                fw.write(txtCodigo.getText());
                fw.flush();
                break;
            case "cargar": //Codigo para cargar archivo
                List<String> lines = java.nio.file.Files.readAllLines(selecArchivo.toPath());
                javax.swing.text.StyledDocument doc = txtCodigo.getStyledDocument();
                txtCodigo.setText("");
                for(String line : lines){
                    doc.insertString(doc.getLength(), line + "\n", null);
                }
                break;
            }
        }catch (IOException ex){
        }catch (javax.swing.text.BadLocationException ex){
        }finally{
            if(fw != null){
                try {
                    fw.close();
                }catch(IOException ex){
                    
                }
            }
        fileChooser.removeChoosableFileFilter(filtro);
        }
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
                
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLexico;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> listTokens;
    private javax.swing.JMenuItem menuBuscar;
    private javax.swing.JMenuItem mnuCargar;
    private javax.swing.JMenuItem mnuGuardar;
    private javax.swing.JMenuItem mnuNuevo;
    private javax.swing.JTextPane txtCodigo;
    private javax.swing.JTextArea txtMensajes;
    // End of variables declaration//GEN-END:variables
}
